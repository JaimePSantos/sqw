#!/usr/bin/env python3

"""
Survival Probability Data Loader and Plotter

This script demonstrates how to load and visualize the survival probability data
generated by survival_probability_analysis.py.

Features:
- Load survival probability data from experiments_data_samples_survivalProb
- Plot survival probabilities vs time for different noise levels (linear and log-linear scales)
- Compare different survival ranges
- Generate decay rate analysis plots (when log-linear plotting is enabled)
- Generate summary statistics
- Configurable plotting options including log-linear (semilogy) plots for decay analysis
"""

import os
import pickle
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# Configuration
TARGET_BASE_DIR = "experiments_data_samples_survivalProb"
FIGURES_DIR = "survival_probability_figures"

# Plotting configuration
ENABLE_LOG_LINEAR_PLOTTING = True  # Set to True to enable log-linear (semilogy) plots
PLOT_DPI = 300  # DPI for saved plots
PLOT_FORMAT = 'png'  # Format for saved plots (png, pdf, svg, etc.)
PLOT_FIGSIZE = (12, 8)  # Figure size for plots

def load_survival_metadata():
    """Load metadata from survival probability analysis"""
    metadata_file = os.path.join(TARGET_BASE_DIR, "summary", "metadata.pkl")
    
    if not os.path.exists(metadata_file):
        raise FileNotFoundError(f"Metadata file not found: {metadata_file}")
    
    with open(metadata_file, 'rb') as f:
        metadata = pickle.load(f)
    
    return metadata

def load_all_survival_data():
    """Load all survival probability data"""
    summary_file = os.path.join(TARGET_BASE_DIR, "summary", "all_survival_probabilities.pkl")
    
    if not os.path.exists(summary_file):
        raise FileNotFoundError(f"Summary file not found: {summary_file}")
    
    with open(summary_file, 'rb') as f:
        all_data = pickle.load(f)
    
    return all_data

def load_individual_survival_data(dev_idx, range_name, metadata):
    """Load survival data for a specific deviation and range"""
    dev = metadata["devs"][dev_idx]
    
    # Format deviation for directory name
    if isinstance(dev, (tuple, list)) and len(dev) == 2:
        dev_str = f"dev_min{dev[0]:.3f}_max{dev[1]:.3f}"
    else:
        dev_str = f"dev_{dev:.3f}"
    
    # Build file path
    filepath = os.path.join(
        TARGET_BASE_DIR,
        "dummy_tesselation_func_static_noise",
        f"theta_{metadata['theta']:.6f}",
        dev_str,
        f"N_{metadata['N']}",
        f"survival_{range_name}.pkl"
    )
    
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"Survival data file not found: {filepath}")
    
    with open(filepath, 'rb') as f:
        survival_data = pickle.load(f)
    
    return survival_data

def plot_survival_vs_time(metadata, all_data, range_name="center_11", save_figs=True):
    """Plot survival probability vs time for different noise levels"""
    
    os.makedirs(FIGURES_DIR, exist_ok=True)
    
    # Linear scale plot
    plt.figure(figsize=PLOT_FIGSIZE)
    
    colors = ['blue', 'green', 'orange', 'red', 'purple']
    
    time_steps = np.arange(metadata["steps"])
    
    for dev_idx, (color, data_dict) in enumerate(zip(colors, all_data.values())):
        dev = data_dict["dev_value"]
        survival_data = data_dict["survival_data"][range_name]
        
        # Handle None values (corrupted data)
        valid_mask = survival_data != None
        valid_times = time_steps[valid_mask]
        valid_survival = survival_data[valid_mask]
        
        # Format label
        if isinstance(dev, (tuple, list)) and len(dev) == 2:
            label = f"Noise range: ({dev[0]}, {dev[1]})"
        else:
            label = f"Noise: {dev}"
        
        plt.plot(valid_times, valid_survival, color=color, label=label, linewidth=2, alpha=0.8)
    
    plt.xlabel("Time Steps", fontsize=12)
    plt.ylabel("Survival Probability", fontsize=12)
    plt.title(f"Survival Probability vs Time - Range: {range_name}\\nN={metadata['N']}, θ={metadata['theta']:.3f}", fontsize=14)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_figs:
        filename = f"survival_vs_time_{range_name}_linear.{PLOT_FORMAT}"
        filepath = os.path.join(FIGURES_DIR, filename)
        plt.savefig(filepath, dpi=PLOT_DPI, bbox_inches='tight')
        print(f"Saved linear figure: {filepath}")
    
    plt.show()
    
    # Log-linear scale plot (if enabled)
    if ENABLE_LOG_LINEAR_PLOTTING:
        plt.figure(figsize=PLOT_FIGSIZE)
        
        for dev_idx, (color, data_dict) in enumerate(zip(colors, all_data.values())):
            dev = data_dict["dev_value"]
            survival_data = data_dict["survival_data"][range_name]
            
            # Handle None values and filter out zero/negative values for log scale
            valid_mask = (survival_data != None) & (survival_data > 0)
            valid_times = time_steps[valid_mask]
            valid_survival = survival_data[valid_mask]
            
            if len(valid_survival) == 0:
                print(f"Warning: No positive values for {range_name}, dev {dev} - skipping log plot")
                continue
            
            # Format label
            if isinstance(dev, (tuple, list)) and len(dev) == 2:
                label = f"Noise range: ({dev[0]}, {dev[1]})"
            else:
                label = f"Noise: {dev}"
            
            plt.semilogy(valid_times, valid_survival, color=color, label=label, linewidth=2, alpha=0.8)
        
        plt.xlabel("Time Steps", fontsize=12)
        plt.ylabel("Survival Probability (log scale)", fontsize=12)
        plt.title(f"Survival Probability vs Time (Log Scale) - Range: {range_name}\\nN={metadata['N']}, θ={metadata['theta']:.3f}", fontsize=14)
        plt.legend(fontsize=10)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        if save_figs:
            filename = f"survival_vs_time_{range_name}_loglinear.{PLOT_FORMAT}"
            filepath = os.path.join(FIGURES_DIR, filename)
            plt.savefig(filepath, dpi=PLOT_DPI, bbox_inches='tight')
            print(f"Saved log-linear figure: {filepath}")
        
        plt.show()

def plot_survival_comparison_ranges(metadata, all_data, dev_idx=0, save_figs=True):
    """Plot comparison of different survival ranges for a single noise level"""
    
    os.makedirs(FIGURES_DIR, exist_ok=True)
    
    # Linear scale plot
    plt.figure(figsize=PLOT_FIGSIZE)
    
    data_dict = list(all_data.values())[dev_idx]
    dev = data_dict["dev_value"]
    survival_data_all = data_dict["survival_data"]
    
    time_steps = np.arange(metadata["steps"])
    
    colors = ['blue', 'green', 'orange', 'red', 'purple', 'brown']
    
    for i, (range_name, color) in enumerate(zip(survival_data_all.keys(), colors)):
        survival_data = survival_data_all[range_name]
        
        # Handle None values
        valid_mask = survival_data != None
        valid_times = time_steps[valid_mask]
        valid_survival = survival_data[valid_mask]
        
        plt.plot(valid_times, valid_survival, color=color, label=range_name.replace("_", " ").title(), linewidth=2, alpha=0.8)
    
    # Format dev label
    if isinstance(dev, (tuple, list)) and len(dev) == 2:
        dev_label = f"({dev[0]}, {dev[1]})"
    else:
        dev_label = f"{dev}"
    
    plt.xlabel("Time Steps", fontsize=12)
    plt.ylabel("Survival Probability", fontsize=12)
    plt.title(f"Survival Probability Comparison - Different Ranges\\nNoise: {dev_label}, N={metadata['N']}, θ={metadata['theta']:.3f}", fontsize=14)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_figs:
        filename = f"survival_ranges_comparison_dev{dev_idx}_linear.{PLOT_FORMAT}"
        filepath = os.path.join(FIGURES_DIR, filename)
        plt.savefig(filepath, dpi=PLOT_DPI, bbox_inches='tight')
        print(f"Saved linear comparison figure: {filepath}")
    
    plt.show()
    
    # Log-linear scale plot (if enabled)
    if ENABLE_LOG_LINEAR_PLOTTING:
        plt.figure(figsize=PLOT_FIGSIZE)
        
        for i, (range_name, color) in enumerate(zip(survival_data_all.keys(), colors)):
            survival_data = survival_data_all[range_name]
            
            # Handle None values and filter out zero/negative values for log scale
            valid_mask = (survival_data != None) & (survival_data > 0)
            valid_times = time_steps[valid_mask]
            valid_survival = survival_data[valid_mask]
            
            if len(valid_survival) == 0:
                print(f"Warning: No positive values for {range_name} - skipping from log plot")
                continue
            
            plt.semilogy(valid_times, valid_survival, color=color, label=range_name.replace("_", " ").title(), linewidth=2, alpha=0.8)
        
        plt.xlabel("Time Steps", fontsize=12)
        plt.ylabel("Survival Probability (log scale)", fontsize=12)
        plt.title(f"Survival Probability Comparison (Log Scale) - Different Ranges\\nNoise: {dev_label}, N={metadata['N']}, θ={metadata['theta']:.3f}", fontsize=14)
        plt.legend(fontsize=10)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        if save_figs:
            filename = f"survival_ranges_comparison_dev{dev_idx}_loglinear.{PLOT_FORMAT}"
            filepath = os.path.join(FIGURES_DIR, filename)
            plt.savefig(filepath, dpi=PLOT_DPI, bbox_inches='tight')
            print(f"Saved log-linear comparison figure: {filepath}")
        
        plt.show()

def plot_decay_analysis(metadata, all_data, save_figs=True):
    """Create decay rate analysis plots for each survival range"""
    
    if not ENABLE_LOG_LINEAR_PLOTTING:
        print("Log-linear plotting disabled - skipping decay analysis")
        return
    
    os.makedirs(FIGURES_DIR, exist_ok=True)
    
    time_steps = np.arange(metadata["steps"])
    
    # Get all range names from first deviation
    first_data = list(all_data.values())[0]
    range_names = list(first_data["survival_data"].keys())
    
    for range_name in range_names:
        plt.figure(figsize=PLOT_FIGSIZE)
        
        decay_rates = []
        dev_labels = []
        colors_used = []
        
        for dev_idx, data_dict in all_data.items():
            dev = data_dict["dev_value"]
            survival_data = data_dict["survival_data"].get(range_name)
            
            if survival_data is None:
                continue
            
            # Calculate decay rate (negative slope in log space)
            valid_mask = (survival_data != None) & (survival_data > 0)
            valid_times = time_steps[valid_mask]
            valid_survival = survival_data[valid_mask]
            
            if len(valid_survival) > 10:  # Need sufficient points for fit
                # Fit linear model in log space
                log_survival = np.log(valid_survival)
                coeffs = np.polyfit(valid_times, log_survival, 1)
                decay_rate = -coeffs[0]  # Negative slope gives decay rate
                decay_rates.append(decay_rate)
                
                # Format deviation label
                if isinstance(dev, (tuple, list)) and len(dev) == 2:
                    dev_label = f"[{dev[0]}, {dev[1]}]"
                else:
                    dev_label = f"{dev}"
                dev_labels.append(dev_label)
                colors_used.append(['blue', 'green', 'orange', 'red', 'purple'][dev_idx % 5])
        
        if decay_rates:
            # Create bar plot of decay rates
            bars = plt.bar(range(len(decay_rates)), decay_rates, color=colors_used)
            plt.xlabel('Deviation', fontsize=12)
            plt.ylabel('Decay Rate', fontsize=12)
            plt.title(f'Survival Probability Decay Rates - {range_name.replace("_", " ").title()}', fontsize=14)
            plt.xticks(range(len(dev_labels)), dev_labels, rotation=45)
            plt.grid(True, alpha=0.3)
            
            # Add value labels on bars
            for bar, rate in zip(bars, decay_rates):
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height,
                        f'{rate:.4f}', ha='center', va='bottom', fontsize=10)
            
            plt.tight_layout()
            
            if save_figs:
                filename = f"survival_decay_rates_{range_name}.{PLOT_FORMAT}"
                filepath = os.path.join(FIGURES_DIR, filename)
                plt.savefig(filepath, dpi=PLOT_DPI, bbox_inches='tight')
                print(f"Saved decay analysis figure: {filepath}")
            
            plt.show()
        else:
            plt.close()
            print(f"Warning: No valid data for decay analysis of {range_name}")

def calculate_survival_statistics(metadata, all_data):
    """Calculate and print statistics for survival probabilities"""
    
    print("\\n" + "=" * 60)
    print("SURVIVAL PROBABILITY STATISTICS")
    print("=" * 60)
    
    for dev_idx, data_dict in all_data.items():
        dev = data_dict["dev_value"]
        survival_data_all = data_dict["survival_data"]
        
        # Format dev label
        if isinstance(dev, (tuple, list)) and len(dev) == 2:
            dev_label = f"Noise: ({dev[0]}, {dev[1]})"
        else:
            dev_label = f"Noise: {dev}"
        
        print(f"\\n{dev_label}")
        print("-" * 40)
        
        for range_name, survival_data in survival_data_all.items():
            # Handle None values
            valid_data = survival_data[survival_data != None]
            
            if len(valid_data) > 0:
                mean_val = np.mean(valid_data)
                std_val = np.std(valid_data)
                min_val = np.min(valid_data)
                max_val = np.max(valid_data)
                
                print(f"  {range_name:15s}: mean={mean_val:.6f}, std={std_val:.6f}, range=[{min_val:.6f}, {max_val:.6f}]")
            else:
                print(f"  {range_name:15s}: No valid data")

def main():
    """Main function to demonstrate survival probability analysis"""
    
    print("Loading survival probability data...")
    
    try:
        # Load metadata and data
        metadata = load_survival_metadata()
        all_data = load_all_survival_data()
        
        print(f"✓ Loaded data for {len(all_data)} deviations")
        print(f"✓ System parameters: N={metadata['N']}, steps={metadata['steps']}, θ={metadata['theta']:.3f}")
        print(f"✓ Available ranges: {list(list(all_data.values())[0]['survival_data'].keys())}")
        
        # Calculate and display statistics
        calculate_survival_statistics(metadata, all_data)
        
        # Create plots
        print("\\n" + "=" * 60)
        print("GENERATING PLOTS")
        print("=" * 60)
        
        # Plot survival vs time for center_11 range
        print("\\nPlotting survival probability vs time (center_11 range)...")
        plot_survival_vs_time(metadata, all_data, range_name="center_11")
        
        # Plot survival vs time for center_single range
        print("\\nPlotting survival probability vs time (center_single range)...")
        plot_survival_vs_time(metadata, all_data, range_name="center_single")
        
        # Plot range comparison for first deviation (no noise)
        print("\\nPlotting range comparison (no noise case)...")
        plot_survival_comparison_ranges(metadata, all_data, dev_idx=0)
        
        # Plot range comparison for last deviation (highest noise)
        print("\\nPlotting range comparison (highest noise case)...")
        plot_survival_comparison_ranges(metadata, all_data, dev_idx=len(all_data)-1)
        
        # Plot decay analysis (if log-linear plotting is enabled)
        if ENABLE_LOG_LINEAR_PLOTTING:
            print("\\nGenerating decay rate analysis plots...")
            plot_decay_analysis(metadata, all_data)
        
        print(f"\\n✅ Analysis complete! Figures saved to: {FIGURES_DIR}")
        
        if ENABLE_LOG_LINEAR_PLOTTING:
            print("✓ Both linear and log-linear plots generated")
            print("✓ Decay rate analysis included")
        else:
            print("ⓘ Only linear plots generated (log-linear plotting disabled)")
        
        print("\\n=== GENERATED PLOTS ===")
        print("Linear plots:")
        print("  - survival_vs_time_[range]_linear.png")
        print("  - survival_ranges_comparison_dev[X]_linear.png")
        if ENABLE_LOG_LINEAR_PLOTTING:
            print("Log-linear plots:")
            print("  - survival_vs_time_[range]_loglinear.png")
            print("  - survival_ranges_comparison_dev[X]_loglinear.png")
            print("  - survival_decay_rates_[range].png")
        
    except FileNotFoundError as e:
        print(f"❌ Error: {e}")
        print("Please run survival_probability_analysis.py first to generate the data.")
    except Exception as e:
        print(f"💥 Unexpected error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
