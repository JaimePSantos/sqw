#!/usr/bin/env python3

"""
Survival Probability Data Loader and Plotter

This script demonstrates how to load and visualize the survival probability data
generated by survival_probability_analysis.py.

Features:
- Load survival probability data from experiments_data_samples_survivalProb
- Plot survival probabilities vs time for different noise levels
- Compare different survival ranges
- Generate summary statistics
"""

import os
import pickle
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# Configuration
TARGET_BASE_DIR = "experiments_data_samples_survivalProb"
FIGURES_DIR = "survival_probability_figures"

def load_survival_metadata():
    """Load metadata from survival probability analysis"""
    metadata_file = os.path.join(TARGET_BASE_DIR, "summary", "metadata.pkl")
    
    if not os.path.exists(metadata_file):
        raise FileNotFoundError(f"Metadata file not found: {metadata_file}")
    
    with open(metadata_file, 'rb') as f:
        metadata = pickle.load(f)
    
    return metadata

def load_all_survival_data():
    """Load all survival probability data"""
    summary_file = os.path.join(TARGET_BASE_DIR, "summary", "all_survival_probabilities.pkl")
    
    if not os.path.exists(summary_file):
        raise FileNotFoundError(f"Summary file not found: {summary_file}")
    
    with open(summary_file, 'rb') as f:
        all_data = pickle.load(f)
    
    return all_data

def load_individual_survival_data(dev_idx, range_name, metadata):
    """Load survival data for a specific deviation and range"""
    dev = metadata["devs"][dev_idx]
    
    # Format deviation for directory name
    if isinstance(dev, (tuple, list)) and len(dev) == 2:
        dev_str = f"dev_min{dev[0]:.3f}_max{dev[1]:.3f}"
    else:
        dev_str = f"dev_{dev:.3f}"
    
    # Build file path
    filepath = os.path.join(
        TARGET_BASE_DIR,
        "dummy_tesselation_func_static_noise",
        f"theta_{metadata['theta']:.6f}",
        dev_str,
        f"N_{metadata['N']}",
        f"survival_{range_name}.pkl"
    )
    
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"Survival data file not found: {filepath}")
    
    with open(filepath, 'rb') as f:
        survival_data = pickle.load(f)
    
    return survival_data

def plot_survival_vs_time(metadata, all_data, range_name="center_11", save_figs=True):
    """Plot survival probability vs time for different noise levels"""
    
    os.makedirs(FIGURES_DIR, exist_ok=True)
    
    plt.figure(figsize=(12, 8))
    
    colors = ['blue', 'green', 'orange', 'red', 'purple']
    
    time_steps = np.arange(metadata["steps"])
    
    for dev_idx, (color, data_dict) in enumerate(zip(colors, all_data.values())):
        dev = data_dict["dev_value"]
        survival_data = data_dict["survival_data"][range_name]
        
        # Handle None values (corrupted data)
        valid_mask = survival_data != None
        valid_times = time_steps[valid_mask]
        valid_survival = survival_data[valid_mask]
        
        # Format label
        if isinstance(dev, (tuple, list)) and len(dev) == 2:
            label = f"Noise range: ({dev[0]}, {dev[1]})"
        else:
            label = f"Noise: {dev}"
        
        plt.plot(valid_times, valid_survival, color=color, label=label, linewidth=2, alpha=0.8)
    
    plt.xlabel("Time Steps", fontsize=12)
    plt.ylabel("Survival Probability", fontsize=12)
    plt.title(f"Survival Probability vs Time - Range: {range_name}\\nN={metadata['N']}, Œ∏={metadata['theta']:.3f}", fontsize=14)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_figs:
        filename = f"survival_vs_time_{range_name}.png"
        filepath = os.path.join(FIGURES_DIR, filename)
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        print(f"Saved figure: {filepath}")
    
    plt.show()

def plot_survival_comparison_ranges(metadata, all_data, dev_idx=0, save_figs=True):
    """Plot comparison of different survival ranges for a single noise level"""
    
    os.makedirs(FIGURES_DIR, exist_ok=True)
    
    plt.figure(figsize=(12, 8))
    
    data_dict = list(all_data.values())[dev_idx]
    dev = data_dict["dev_value"]
    survival_data_all = data_dict["survival_data"]
    
    time_steps = np.arange(metadata["steps"])
    
    colors = ['blue', 'green', 'orange', 'red', 'purple', 'brown']
    
    for i, (range_name, color) in enumerate(zip(survival_data_all.keys(), colors)):
        survival_data = survival_data_all[range_name]
        
        # Handle None values
        valid_mask = survival_data != None
        valid_times = time_steps[valid_mask]
        valid_survival = survival_data[valid_mask]
        
        plt.plot(valid_times, valid_survival, color=color, label=range_name, linewidth=2, alpha=0.8)
    
    # Format dev label
    if isinstance(dev, (tuple, list)) and len(dev) == 2:
        dev_label = f"({dev[0]}, {dev[1]})"
    else:
        dev_label = f"{dev}"
    
    plt.xlabel("Time Steps", fontsize=12)
    plt.ylabel("Survival Probability", fontsize=12)
    plt.title(f"Survival Probability Comparison - Different Ranges\\nNoise: {dev_label}, N={metadata['N']}, Œ∏={metadata['theta']:.3f}", fontsize=14)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_figs:
        filename = f"survival_ranges_comparison_dev{dev_idx}.png"
        filepath = os.path.join(FIGURES_DIR, filename)
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        print(f"Saved figure: {filepath}")
    
    plt.show()

def calculate_survival_statistics(metadata, all_data):
    """Calculate and print statistics for survival probabilities"""
    
    print("\\n" + "=" * 60)
    print("SURVIVAL PROBABILITY STATISTICS")
    print("=" * 60)
    
    for dev_idx, data_dict in all_data.items():
        dev = data_dict["dev_value"]
        survival_data_all = data_dict["survival_data"]
        
        # Format dev label
        if isinstance(dev, (tuple, list)) and len(dev) == 2:
            dev_label = f"Noise: ({dev[0]}, {dev[1]})"
        else:
            dev_label = f"Noise: {dev}"
        
        print(f"\\n{dev_label}")
        print("-" * 40)
        
        for range_name, survival_data in survival_data_all.items():
            # Handle None values
            valid_data = survival_data[survival_data != None]
            
            if len(valid_data) > 0:
                mean_val = np.mean(valid_data)
                std_val = np.std(valid_data)
                min_val = np.min(valid_data)
                max_val = np.max(valid_data)
                
                print(f"  {range_name:15s}: mean={mean_val:.6f}, std={std_val:.6f}, range=[{min_val:.6f}, {max_val:.6f}]")
            else:
                print(f"  {range_name:15s}: No valid data")

def main():
    """Main function to demonstrate survival probability analysis"""
    
    print("Loading survival probability data...")
    
    try:
        # Load metadata and data
        metadata = load_survival_metadata()
        all_data = load_all_survival_data()
        
        print(f"‚úì Loaded data for {len(all_data)} deviations")
        print(f"‚úì System parameters: N={metadata['N']}, steps={metadata['steps']}, Œ∏={metadata['theta']:.3f}")
        print(f"‚úì Available ranges: {list(list(all_data.values())[0]['survival_data'].keys())}")
        
        # Calculate and display statistics
        calculate_survival_statistics(metadata, all_data)
        
        # Create plots
        print("\\n" + "=" * 60)
        print("GENERATING PLOTS")
        print("=" * 60)
        
        # Plot survival vs time for center_11 range
        print("\\nPlotting survival probability vs time (center_11 range)...")
        plot_survival_vs_time(metadata, all_data, range_name="center_11")
        
        # Plot survival vs time for center_single range
        print("\\nPlotting survival probability vs time (center_single range)...")
        plot_survival_vs_time(metadata, all_data, range_name="center_single")
        
        # Plot range comparison for first deviation (no noise)
        print("\\nPlotting range comparison (no noise case)...")
        plot_survival_comparison_ranges(metadata, all_data, dev_idx=0)
        
        # Plot range comparison for last deviation (highest noise)
        print("\\nPlotting range comparison (highest noise case)...")
        plot_survival_comparison_ranges(metadata, all_data, dev_idx=len(all_data)-1)
        
        print(f"\\n‚úÖ Analysis complete! Figures saved to: {FIGURES_DIR}")
        
    except FileNotFoundError as e:
        print(f"‚ùå Error: {e}")
        print("Please run survival_probability_analysis.py first to generate the data.")
    except Exception as e:
        print(f"üí• Unexpected error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
